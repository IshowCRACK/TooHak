
> test
> jest httpTests/

FAIL httpTests/player/playerQuestionAnswer.test.ts (8.441 s)
  ● Test successful question answer for two players


          Curl request failed with code 3
          Please look up libcurl error code!
            - https://curl.se/libcurl/c/libcurl-errors.html

          DEBUG: {
            method: "PUT",
            url: "http://127.0.0.1:48237/v1/player/[object Object]/question/1/answer",
            options: {"qs":{},"json":{"answerIds":[{"answer":"Prince Charles","correct":true}]},"headers":{}}
          }

      17 |   }
      18 |
    > 19 |   const res = request(method, path, { qs, json, headers } );
         |                      ^
      20 |
      21 |   if (res.statusCode !== 200) {
      22 |     // Return error code number instead of object in case of error.

          
      at request (../node_modules/sync-request-curl/src/request.ts:60:11)
      at requestHelper (httpTests/fakepi/helpers.ts:19:22)
      at playerQuestionAnswer (httpTests/fakepi/player.ts:29:23)
      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:90:23)

FAIL httpTests/player/playerQuestionData.test.ts (5.097 s)
  ● Successful question information for player - first question

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 8
    + Received  + 0

    @@ -1,26 +1,18 @@
      Object {
        "answers": Array [
          Object {
            "answer": "Prince Charles",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Prince George",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Princess Charlotte",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Prince William",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
        ],
        "duration": 4,
        "points": 5,
        "question": "Who is the Monarch of England?",

      117 |     })
      118 |   };
    > 119 |   expect(res).toStrictEqual({
          |               ^
      120 |     questionId: questionId1,
      121 |     question: question1.question,
      122 |     duration: question1.duration,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:119:15)

  ● Successful question information for player - last question

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"answers": [{"answer": "Prince Tam", "answerId": undefined, "colour": undefined}, {"answer": "Princess Rani", "answerId": undefined, "colour": undefined}, {"answer": "Prince Hayden", "answerId": undefined, "colour": undefined}, {"answer": "Queen Yuchao", "answerId": undefined, "colour": undefined}], "duration": 4, "points": 5, "question": "Who is the Monarch of COMP1531?", "questionId": 1, "thumbnailUrl": Any<String>}
    Received: 400

      149 |     })
      150 |   };
    > 151 |   expect(res).toStrictEqual({
          |               ^
      152 |     questionId: questionId2,
      153 |     question: question2.question,
      154 |     duration: question2.duration,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:151:15)

  ● Successful question information for player - question edit has no impact

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 14
    + Received  +  3

    @@ -1,26 +1,15 @@
      Object {
        "answers": Array [
          Object {
    -       "answer": "Prince Charles",
    -       "answerId": undefined,
    -       "colour": undefined,
    +       "answer": "Chicken",
          },
          Object {
    -       "answer": "Prince George",
    -       "answerId": undefined,
    -       "colour": undefined,
    -     },
    -     Object {
    -       "answer": "Princess Charlotte",
    -       "answerId": undefined,
    -       "colour": undefined,
    +       "answer": "Egg",
          },
          Object {
    -       "answer": "Prince William",
    -       "answerId": undefined,
    -       "colour": undefined,
    +       "answer": "Who knows",
          },
        ],
        "duration": 3,
        "points": 5,
        "question": "What came first, the chicken or the egg?",

      176 |     })
      177 |   };
    > 178 |   expect(res).toStrictEqual({
          |               ^
      179 |     questionId: questionId1,
      180 |     question: editedQuestion.question,
      181 |     duration: editedQuestion.duration,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:178:15)

  ● Successful question information for player - different players get the same info

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 8
    + Received  + 0

    @@ -1,26 +1,18 @@
      Object {
        "answers": Array [
          Object {
            "answer": "Prince Charles",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Prince George",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Princess Charlotte",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Prince William",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
        ],
        "duration": 4,
        "points": 5,
        "question": "Who is the Monarch of England?",

      203 |     })
      204 |   };
    > 205 |   expect(res).toStrictEqual({
          |               ^
      206 |     questionId: questionId1,
      207 |     question: question1.question,
      208 |     duration: question1.duration,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:205:15)

FAIL httpTests/player/playerStatus.test.ts (5.185 s)
  ● Successful status - QUESTION_COUNTDOWN

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "atQuestion": 1,
    +   "atQuestion": 0,
        "numQuestions": 1,
        "state": "QUESTION_COUNTDOWN",
      }

      64 |   adminQuizSessionProgress(token, quizId, sessionId, 'NEXT_QUESTION');
      65 |   const res = playerStatus(playerId);
    > 66 |   expect(res).toStrictEqual({
         |               ^
      67 |     state: "QUESTION_COUNTDOWN",
      68 |     numQuestions: 1,
      69 |     atQuestion: 1

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:66:15)

  ● Successful status - FINAL_RESULTS

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "atQuestion": 0,
    +   "atQuestion": 1,
        "numQuestions": 1,
        "state": "FINAL_RESULTS",
      }

      123 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      124 |   const res = playerStatus(playerId);
    > 125 |   expect(res).toStrictEqual({
          |               ^
      126 |     state: "FINAL_RESULTS",
      127 |     numQuestions: 1,
      128 |     atQuestion: 0

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:125:15)

  ● Successful status - END

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "atQuestion": 0,
    +   "atQuestion": 1,
        "numQuestions": 1,
        "state": "END",
      }

      141 |   adminQuizSessionProgress(token, quizId, sessionId, 'END');
      142 |   const res = playerStatus(playerId);
    > 143 |   expect(res).toStrictEqual({
          |               ^
      144 |     state: "END",
      145 |     numQuestions: 1,
      146 |     atQuestion: 0

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:143:15)

FAIL httpTests/adminQuizSession/adminQuizSessionStatus.test.ts
  ● Test successful session status, before quiz in progress

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,10 +1,11 @@
      Object {
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      104 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      105 |   const quizInfo = adminQuizInfo(token, quizId);
    > 106 |   expect(res).toStrictEqual({
          |               ^
      107 |     "state": "LOBBY",
      108 |     "atQuestion": 0,
      109 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:106:15)

  ● Test successful session status, quiz in progress, question 2

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 2

    @@ -1,10 +1,11 @@
      Object {
    -   "atQuestion": 2,
    +   "atQuestion": 1,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      125 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      126 |   const quizInfo = adminQuizInfo(token, quizId);
    > 127 |   expect(res).toStrictEqual({
          |               ^
      128 |     "state": "QUESTION_COUNTDOWN",
      129 |     "atQuestion": 2,
      130 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:127:15)

  ● Test successful session status, single quiz ended

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 2

    @@ -1,10 +1,11 @@
      Object {
    -   "atQuestion": 0,
    +   "atQuestion": 2,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      155 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      156 |   const quizInfo = adminQuizInfo(token, quizId);
    > 157 |   expect(res).toStrictEqual({
          |               ^
      158 |     "state": "END",
      159 |     "atQuestion": 0,
      160 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:157:15)

  ● Test successful session status, single quiz in final results

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 2

    @@ -1,10 +1,11 @@
      Object {
    -   "atQuestion": 0,
    +   "atQuestion": 2,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      183 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      184 |   const quizInfo = adminQuizInfo(token, quizId);
    > 185 |   expect(res).toStrictEqual({
          |               ^
      186 |     "state": "FINAL_RESULTS",
      187 |     "atQuestion": 0,
      188 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:185:15)

  ● Test successful session status with new session created during during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,10 +1,11 @@
      Object {
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      227 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      228 |   const quizInfo = adminQuizInfo(token, quizId);
    > 229 |   expect(res).toStrictEqual({
          |               ^
      230 |     "state": "LOBBY",
      231 |     "atQuestion": 0,
      232 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:229:15)

  ● Test successful session status with question edit during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,10 +1,11 @@
      Object {
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      244 |   expect(res.metadata.timeLastEdited).toBe(editTime);
      245 |   const quizInfo = adminQuizInfo(token, quizId);
    > 246 |   expect(res).toStrictEqual({
          |               ^
      247 |     "state": "LOBBY",
      248 |     "atQuestion": 0,
      249 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:246:15)

  ● Test successful session status with question delete during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,10 +1,11 @@
      Object {
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      256 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      257 |   const quizInfo = adminQuizInfo(token, quizId);
    > 258 |   expect(res).toStrictEqual({
          |               ^
      259 |     "state": "LOBBY",
      260 |     "atQuestion": 0,
      261 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:258:15)

  ● Test successful session status with question add during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  -  0
    + Received  + 22

    @@ -1,10 +1,11 @@
      Object {
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [
    @@ -52,10 +53,31 @@
              ],
              "duration": 4,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
    +         "thumbnailUrl": "http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg",
    +       },
    +       Object {
    +         "answers": Array [
    +           Object {
    +             "answer": "Chicken",
    +             "correct": false,
    +           },
    +           Object {
    +             "answer": "Egg",
    +             "correct": false,
    +           },
    +           Object {
    +             "answer": "Who knows",
    +             "correct": true,
    +           },
    +         ],
    +         "duration": 3,
    +         "points": 5,
    +         "question": "What came first, the chicken or the egg?",
    +         "questionId": 2,
              "thumbnailUrl": "http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg",
            },
          ],
          "quizId": 0,
          "timeCreated": 1691825037,

      269 |   adminQuizQuestionAdd(token, quizId, editedQuestion);
      270 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
    > 271 |   expect(res).toStrictEqual({
          |               ^
      272 |     "state": "LOBBY",
      273 |     "atQuestion": 0,
      274 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:271:15)

FAIL httpTests/adminQuizSession/adminQuizSessionResults.test.ts
  ● Console

    console.log
      [ undefined, undefined ]

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:95:11)

  ● Successful final results for whole session - admin with one player

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"questionResults": [{"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 0}, {"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}, {"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 1}], "usersRankedByScore": [{"name": "Hayden Smith", "score": 10}, {"name": "Yuchao", "score": 0}]}
    Received: 400

       99 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      100 |   const res = adminQuizSessionResults(token, quizId, sessionId);
    > 101 |   expect(res).toStrictEqual({
          |               ^
      102 |     usersRankedByScore: [
      103 |       {
      104 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:101:15)

  ● Successful final results for whole session - admin with 2 players

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"questionResults": [{"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 0}, {"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith", "Yuchao"]}, {"answerId": undefined, "playersCorrect": ["Hayden Smith", "Yuchao"]}], "questionId": 1}], "usersRankedByScore": [{"name": "Hayden Smith", "score": 10}, {"name": "Yuchao", "score": 2.5}]}
    Received: 400

      171 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      172 |   const res = adminQuizSessionResults(token, quizId, sessionId);
    > 173 |   expect(res).toStrictEqual({
          |               ^
      174 |     usersRankedByScore: [
      175 |       {
      176 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:173:15)

FAIL httpTests/adminQuizSession/adminQuizSessionStart.test.ts
  ● Test quizId invalid error, cannot start session

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {"description": "Second quiz description", "duration": 0, "name": "Second quiz", "numQuestions": 1, "questions": [{"answers": [{"answer": "Prince Charles", "correct": true}, {"answer": "Prince George", "correct": false}, {"answer": "Princess Charlotte", "correct": false}, {"answer": "Prince William", "correct": false}], "duration": 4, "points": 5, "question": "Who is the Monarch of England?", "questionId": 0, "thumbnailUrl": "http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg"}], "quizId": 1, "timeCreated": 1691825038, "timeLastEdited": 1691825038}

      80 | iter3test('Test quizId invalid error, cannot start session', () => {
      81 |   const quiz = adminQuizInfo(token, quizId+1);
    > 82 |   expect(quiz).toStrictEqual(400);
         |                ^
      83 | });
      84 |
      85 | iter3test('Test unauthorised quiz to start session', () => {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:82:16)

  ● Test successful session progress to question after autostart time ends

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "QUESTION_COUNTDOWN"
    Received: "LOBBY"

      100 |   playerJoin(sessionId, 'Yuchao');
      101 |   playerJoin(sessionId, 'Giuliana');
    > 102 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual("QUESTION_COUNTDOWN");
          |                                                     ^
      103 | });
      104 |
      105 | /* iter3test('Test invalid token structure, quiz to read', () => {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:102:53)

FAIL httpTests/player/playerResults.test.ts
  ● Successful final results for whole session - player 1

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"questionResults": [{"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 0}, {"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}, {"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 1}], "usersRankedByScore": [{"name": "Hayden Smith", "score": 10}, {"name": "Yuchao", "score": 0}]}
    Received: 404

      107 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      108 |   const res = playerResults(playerId);
    > 109 |   expect(res).toStrictEqual({
          |               ^
      110 |     usersRankedByScore: [
      111 |       {
      112 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:109:15)

  ● Successful final results for whole session - player 2

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"questionResults": [{"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 0}, {"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith", "Yuchao"]}, {"answerId": undefined, "playersCorrect": ["Hayden Smith", "Yuchao"]}], "questionId": 1}], "usersRankedByScore": [{"name": "Hayden Smith", "score": 10}, {"name": "Yuchao", "score": 2.5}]}
    Received: 404

      186 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      187 |   const res = playerResults(playerId2);
    > 188 |   expect(res).toStrictEqual({
          |               ^
      189 |     usersRankedByScore: [
      190 |       {
      191 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:188:15)

  ● Unsuccessful final results for whole session - playerId invalid

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 404

      238 | iter3test('Unsuccessful final results for whole session - playerId invalid', () => {
      239 |   const res = playerResults(playerId2+1);
    > 240 |   expect(res).toBe(400);
          |               ^
      241 | });
      242 |
      243 | iter3test('Unsuccessful final results for whole session - session not in FINAL_RESULTS', () => {

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:240:15)

  ● Unsuccessful final results for whole session - session not in FINAL_RESULTS

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 404

      243 | iter3test('Unsuccessful final results for whole session - session not in FINAL_RESULTS', () => {
      244 |   const res = playerResults(playerId);
    > 245 |   expect(res).toBe(400);
          |               ^
      246 | });
      247 |
      248 | // TODO T3 add other states

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:245:15)

PASS httpTests/adminQuiz/adminQuizTrashEmpty.test.ts
FAIL httpTests/adminQuiz/adminQuizThumbnail.test.ts
  ● Test unsuccessful quiz thumnail change - invalid imgUrl, non JPEG 

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      40 |   const badImgUrl = 'http://media.giphy.com/media/EBJQRG6M99zSNhnhsW/giphy.gif';
      41 |   const res = adminQuizThumbnail(token, quizId, badImgUrl);
    > 42 |   expect(res).toStrictEqual(400);
         |               ^
      43 | });
      44 |
      45 | /*

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:42:15)

  ● Test unsuccessful quiz thumnail change - invalid imgUrl, 404 not found

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      55 |   const badImgUrl = 'http://webcms3.cse.unsw.edu.au/static/uploads/coursepic/COMP1531/23T2/031145bd3ec1252213d78dc10cf897e5f779b358722a45f0a98eed7d0d5201b3/blah.png';
      56 |   const res = adminQuizThumbnail(token, quizId, badImgUrl);
    > 57 |   expect(res).toStrictEqual(400);
         |               ^
      58 | });
      59 |
      60 | /*

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:57:15)

  ● Test quizId invalid error, cannot put thumbnail

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      70 | iter3test('Test quizId invalid error, cannot put thumbnail', () => {
      71 |   const quiz = adminQuizThumbnail(token, quizId+1, imgUrl);
    > 72 |   expect(quiz).toStrictEqual(400);
         |                ^
      73 | });
      74 |
      75 | iter3test('Test unauthorised quiz to change thumbnail for', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:72:16)

  ● Test unauthorised quiz to change thumbnail for

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      76 |   const token2 = adminAuthRegister('blah2@email.com', 'password1YAY', 'hayden', 'smith').token;
      77 |   const quiz = adminQuizThumbnail(token2, quizId, imgUrl);
    > 78 |   expect(quiz).toStrictEqual(400);
         |                ^
      79 | });
      80 |
      81 |

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:78:16)

  ● Test invalid token session, for thumbnail change

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 403
    Received: 404

      83 |   adminAuthLogout(token);
      84 |   const quiz = adminQuizThumbnail(token, quizId, imgUrl);
    > 85 |   expect(quiz).toStrictEqual(403);
         |                ^
      86 | });
      87 |
      88 |

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:85:16)

FAIL httpTests/adminUser/adminUserPassword.test.ts
  ● Test change password success and can login with new password

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "object"
    Received: "number"

      17 |   adminAuthLogout(token);
      18 |   const userId1 = adminAuthLogin(EMAIL, 'ThisIsAValidNewPassword!123');
    > 19 |   expect(typeof userId1).toStrictEqual('object');
         |                          ^
      20 | });
      21 |
      22 | test('Test old password success is incorrect for change', () => {

      at Object.<anonymous> (httpTests/adminUser/adminUserPassword.test.ts:19:26)

PASS httpTests/adminQuiz/adminQuizTrash.test.ts
FAIL httpTests/adminAuth/adminAuthLogin.test.ts
  ● Test successful login and register gives different tokens, since they are for different sessions

    expect(received).not.toStrictEqual(expected) // deep equality

    Expected: not {"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uSWQiOiIzNDIzMDc1IiwidXNlcklkIjowLCJpYXQiOjE2OTE4MjUwNDF9.tGFbQ70tjzxe_lLhxudehwTQYBSMNOobghydTrgoo3Y"}

      30 |   const token1 = adminAuthRegister(EMAIL, PASSWORD, FIRST, LAST);
      31 |   const token2 = adminAuthLogin(EMAIL, PASSWORD);
    > 32 |   expect(token1).not.toStrictEqual(token2);
         |                      ^
      33 | });
      34 |

      at Object.<anonymous> (httpTests/adminAuth/adminAuthLogin.test.ts:32:22)

PASS httpTests/other/clear.test.ts
PASS httpTests/adminQuizSession/adminQuizSessionProgress.test.ts (11.874 s)
FAIL httpTests/adminQuiz/adminQuizQUestionEdit.test.ts
  ● Test successful question edit

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      354 |   expect(quiz.questions[0].points).toEqual(points);
      355 |   for (let answer of quiz.questions[0].answers) {
    > 356 |     expect(colours).toContain(answer.colour);
          |                     ^
      357 |     expect(answer.answerId).toEqual(expect.any(Number));
      358 |     expect(answerNames).toContain(answer.answer);
      359 |     if (answer.answer === "Queen Elizabeth") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:356:21)

  ● Test successful question edit - multiple correct

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      387 |   const quiz = adminQuizInfo(token, quizId);
      388 |   for (let answer of quiz.questions[0].answers) {
    > 389 |     expect(colours).toContain(answer.colour);
          |                     ^
      390 |     expect(answer.answerId).toEqual(expect.any(Number));
      391 |     expect(answerNames).toContain(answer.answer);
      392 |     if (answer.answer === "King Charles" || answer.answer === "Empress Yuchao") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:389:21)

FAIL httpTests/player/playerQuestionResults.test.ts
  ● Successful particular question results for players - single player single answer correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 1

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -       ],
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 0,
      }

       95 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
       96 |   const res = playerQuestionResults(playerId, 1);
    >  97 |   expect(res).toStrictEqual({
          |               ^
       98 |     questionId: questionId1,
       99 |     questionCorrectBreakdown: [
      100 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:97:15)

  ● Successful particular question results for players - two players single answer correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 5
    + Received  + 1

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -         "Yuchao",
    -       ],
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 0,
      }

      126 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      127 |   const res = playerQuestionResults(playerId2, 1);
    > 128 |   expect(res).toStrictEqual({
          |               ^
      129 |     questionId: questionId1,
      130 |     questionCorrectBreakdown: [
      131 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:128:15)

  ● Successful particular question results for players - single player multiple answers correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 8
    + Received  + 2

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -       ],
    +       "playersCorrect": Array [],
          },
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -       ],
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 1,
      }

      171 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      172 |   const res = playerQuestionResults(playerId, 2);
    > 173 |   expect(res).toStrictEqual({
          |               ^
      174 |     questionId: questionId2,
      175 |     questionCorrectBreakdown: [
      176 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:173:15)

  ● Successful particular question results for players - two players multiple answers correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 10
    + Received  +  2

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -         "Yuchao",
    -       ],
    +       "playersCorrect": Array [],
          },
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -         "Yuchao",
    -       ],
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 1,
      }

      222 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      223 |   const res = playerQuestionResults(playerId2, 2);
    > 224 |   expect(res).toStrictEqual({
          |               ^
      225 |     questionId: questionId2,
      226 |     questionCorrectBreakdown: [
      227 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:224:15)

FAIL httpTests/adminQuiz/adminQuizQuestionAdd.test.ts
  ● Test successful question add - all details are correctly stored and retrieved by quiz info

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      299 |   expect(quiz.questions[0].points).toEqual(points);
      300 |   for (let answer of quiz.questions[0].answers) {
    > 301 |     expect(colours).toContain(answer.colour);
          |                     ^
      302 |     expect(answer.answerId).toEqual(expect.any(Number));
      303 |     expect(answerNames).toContain(answer.answer);
      304 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:301:21)

  ● Test successful question add - multiple correct

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      332 |   const quiz = adminQuizInfo(token, quizId);
      333 |   for (let answer of quiz.questions[0].answers) {
    > 334 |     expect(colours).toContain(answer.colour);
          |                     ^
      335 |     expect(answer.answerId).toEqual(expect.any(Number));
      336 |     expect(answerNames).toContain(answer.answer);
      337 |     if (answer.answer === "Prince Charles" || answer.answer === "Prince George") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:334:21)

PASS httpTests/adminUser/adminUserDetailsPut.test.ts
FAIL httpTests/adminQuiz/adminQuizQuestionMove.test.ts
  ● Successful quiz question move

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      79 |   expect(quizInfo.questions[newPosition].points).toEqual(question.points);
      80 |   for (let answer of quizInfo.questions[newPosition].answers) {
    > 81 |     expect(colours).toContain(answer.colour);
         |                     ^
      82 |     expect(answer.answerId).toEqual(expect.any(Number));
      83 |     expect(answerNames).toContain(answer.answer);
      84 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionMove.test.ts:81:21)

  ● Invalid position for quiz move - longer than n-1 questions

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

       97 | test('Invalid position for quiz move - longer than n-1 questions', () => {
       98 |   const res = adminQuizQuestionMove(token, quizId, questionId, 1);
    >  99 |   expect(res).toStrictEqual(400);
          |               ^
      100 | });
      101 |
      102 | test('Invalid position for quiz move - less than 0', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionMove.test.ts:99:15)

FAIL httpTests/adminQuiz/adminQuizQuestionDelete.test.ts
  ● Successful quiz question delete

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 403

      68 | test('Successful quiz question delete', () => {
      69 |   const res = adminQuizQuestionDelete(token, quizId, questionId);
    > 70 |   expect(res).toStrictEqual({});
         |               ^
      71 |   const questions = adminQuizInfo(token, quizId).questions;
      72 |   expect(questions).not.toContain(question)
      73 |

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDelete.test.ts:70:15)

  ● Quiz question already deleted

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 403

      77 |   adminQuizQuestionDelete(token, quizId, questionId);
      78 |   const res = adminQuizQuestionDelete(token, quizId, questionId);
    > 79 |   expect(res).toStrictEqual(400);
         |               ^
      80 | });
      81 |
      82 | test("quizId invalid - quiz question delete", () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDelete.test.ts:79:15)

  ● questionId invalid (already deleted) - quiz question delete

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 403

       99 |   adminQuizQuestionDelete(token, quizId, questionId)
      100 |   const res = adminQuizQuestionDelete(token, quizId, questionId);
    > 101 |   expect(res).toStrictEqual(400);
          |               ^
      102 | });
      103 |
      104 | /* iter3test('token is not a valid structure - quiz question delete', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDelete.test.ts:101:15)

FAIL httpTests/adminQuiz/adminQuizTransfer.test.ts
  ● Test successful quiz transfer

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      18 | test('Test successful quiz transfer', () => {
      19 |   const res = adminQuizTransfer(token, quizId, userEmail);
    > 20 |   expect(res).toStrictEqual({});
         |               ^
      21 |   const quizzes = adminQuizList(token2).quizzes;
      22 |   expect(quizzes).toStrictEqual([{ quizId: quizId, name: 'test quiz' }]);
      23 | });

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTransfer.test.ts:20:15)

  ● Test successful quiz transfer, then transfer back to creator

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      26 |   adminQuizTransfer(token, quizId, userEmail);
      27 |   const res = adminQuizTransfer(token2, quizId, 'blah@email.com');
    > 28 |   expect(res).toStrictEqual({});
         |               ^
      29 |   const quizzes = adminQuizList(token).quizzes;
      30 |   expect(quizzes).toStrictEqual([{ quizId: quizId, name: 'test quiz' }]);
      31 | });

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTransfer.test.ts:28:15)

FAIL httpTests/player/playerPostChat.test.ts
  ● Successful for one message, same player - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 500

      57 |   // TODO get unix timestamp
      58 |   const timestamp = Math.round(Date.now() / 1000);
    > 59 |   expect(res).toStrictEqual({});
         |               ^
      60 |   const message = playerGetChat(playerId);
      61 |   expect(message.messages[0]).toStrictEqual({
      62 |     messageBody,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:59:15)

  ● Successful for multiple messages, same player, same body - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 500

      72 |   const msg2 = playerPostChat(playerId, messageBody);
      73 |   const timestamp = Math.round(Date.now() / 1000);
    > 74 |   expect(msg1).toStrictEqual({});
         |                ^
      75 |   expect(msg2).toStrictEqual({});
      76 |   const message = playerGetChat(playerId);
      77 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:74:16)

  ● Successful for multiple messages, different players - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 500

       96 |   const msg2 = playerPostChat(playerId2, messageBody);
       97 |   const timestamp = Math.round(Date.now() / 1000);
    >  98 |   expect(msg1).toStrictEqual({});
          |                ^
       99 |   expect(msg2).toStrictEqual({});
      100 |   const message = playerGetChat(playerId);
      101 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:98:16)

  ● messageBody less than 1 character - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      121 | iter3test('messageBody less than 1 character - chat post', () => {
      122 |   const res = playerPostChat(playerId, '');
    > 123 |   expect(res).toBe(400);
          |               ^
      124 | });
      125 |
      126 | iter3test('messageBody more than 100 characters - chat post', () => {

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:123:15)

  ● messageBody more than 100 characters - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      126 | iter3test('messageBody more than 100 characters - chat post', () => {
      127 |   const res = playerPostChat(playerId, 'a'.repeat(101));
    > 128 |   expect(res).toBe(400);
          |               ^
      129 | });
      130 |
      131 | iter3test('Invalid messageBody after a valid one - chat post', () => {

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:128:15)

  ● Invalid messageBody after a valid one - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      133 |   const timestamp = Math.round(Date.now() / 1000);
      134 |   const res = playerPostChat(playerId, '');
    > 135 |   expect(res).toBe(400);
          |               ^
      136 |   const message = playerGetChat(playerId);
      137 |   expect(message.messages.length).toBe(1);
      138 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:135:15)

PASS httpTests/adminQuiz/adminQuizNameUpdate.test.ts
PASS httpTests/adminQuiz/adminQuizDescriptionUpdate.test.ts
FAIL httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts
  ● Successful quiz question duplicate

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      78 |   expect(quiz.questions[1].points).toEqual(question.points);
      79 |   for (let answer of quiz.questions[0].answers) {
    > 80 |     expect(colours).toContain(answer.colour);
         |                     ^
      81 |     expect(answer.answerId).toEqual(expect.any(Number));
      82 |     expect(answerNames).toContain(answer.answer);
      83 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts:80:21)

PASS httpTests/adminAuth/adminAuthRegister.test.ts
PASS httpTests/adminQuiz/adminQuizNew.test.ts
FAIL httpTests/adminAuth/adminAuthLogout.test.ts
  ● Logout in one session doesnt affect another

    expect(received).not.toStrictEqual(expected) // deep equality

    Expected: not 403

      43 |   adminAuthLogout(token);
      44 |   const res = adminUserDetailsGet(tok2);
    > 45 |   expect(res).not.toStrictEqual(403);
         |                   ^
      46 | });

      at Object.<anonymous> (httpTests/adminAuth/adminAuthLogout.test.ts:45:19)

PASS httpTests/adminUser/adminUserDetails.test.ts
PASS httpTests/player/playerJoin.test.ts
PASS httpTests/adminQuiz/adminQuizRestore.test.ts
FAIL httpTests/player/playerGetChat.test.ts
  ● Successful get chat - conversation fetched by player 2

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"messageBody": "I am Tahook-ed on this game", "playerId": 1, "playerName": "Hayden Smith", "timeSent": Any<Number>}
    Received: undefined

      61 |   const timestamp = Math.round(Date.now() / 1000);
      62 |   const message = playerGetChat(playerId2);
    > 63 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      64 |     messageBody,
      65 |     playerId: playerId1,
      66 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:63:31)

  ● Messages from other sessions player isnt in arent returned - chat get for playerId1

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"messageBody": "I am Tahook-ed on this game", "playerId": 1, "playerName": "Hayden Smith", "timeSent": Any<Number>}
    Received: undefined

      83 |   const timestamp = Math.round(Date.now() / 1000);
      84 |   const message = playerGetChat(playerId1);
    > 85 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      86 |     messageBody,
      87 |     playerId: playerId1,
      88 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:85:31)

PASS httpTests/adminQuiz/adminQuizDelete.test.ts
PASS httpTests/adminQuiz/adminQuizInfo.test.ts
PASS httpTests/adminQuiz/adminQuizList.test.ts

Summary of all failing tests
FAIL httpTests/player/playerQuestionAnswer.test.ts (8.441 s)
  ● Test successful question answer for two players


          Curl request failed with code 3
          Please look up libcurl error code!
            - https://curl.se/libcurl/c/libcurl-errors.html

          DEBUG: {
            method: "PUT",
            url: "http://127.0.0.1:48237/v1/player/[object Object]/question/1/answer",
            options: {"qs":{},"json":{"answerIds":[{"answer":"Prince Charles","correct":true}]},"headers":{}}
          }

      17 |   }
      18 |
    > 19 |   const res = request(method, path, { qs, json, headers } );
         |                      ^
      20 |
      21 |   if (res.statusCode !== 200) {
      22 |     // Return error code number instead of object in case of error.

          
      at request (../node_modules/sync-request-curl/src/request.ts:60:11)
      at requestHelper (httpTests/fakepi/helpers.ts:19:22)
      at playerQuestionAnswer (httpTests/fakepi/player.ts:29:23)
      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:90:23)

FAIL httpTests/player/playerQuestionData.test.ts (5.097 s)
  ● Successful question information for player - first question

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 8
    + Received  + 0

    @@ -1,26 +1,18 @@
      Object {
        "answers": Array [
          Object {
            "answer": "Prince Charles",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Prince George",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Princess Charlotte",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Prince William",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
        ],
        "duration": 4,
        "points": 5,
        "question": "Who is the Monarch of England?",

      117 |     })
      118 |   };
    > 119 |   expect(res).toStrictEqual({
          |               ^
      120 |     questionId: questionId1,
      121 |     question: question1.question,
      122 |     duration: question1.duration,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:119:15)

  ● Successful question information for player - last question

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"answers": [{"answer": "Prince Tam", "answerId": undefined, "colour": undefined}, {"answer": "Princess Rani", "answerId": undefined, "colour": undefined}, {"answer": "Prince Hayden", "answerId": undefined, "colour": undefined}, {"answer": "Queen Yuchao", "answerId": undefined, "colour": undefined}], "duration": 4, "points": 5, "question": "Who is the Monarch of COMP1531?", "questionId": 1, "thumbnailUrl": Any<String>}
    Received: 400

      149 |     })
      150 |   };
    > 151 |   expect(res).toStrictEqual({
          |               ^
      152 |     questionId: questionId2,
      153 |     question: question2.question,
      154 |     duration: question2.duration,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:151:15)

  ● Successful question information for player - question edit has no impact

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 14
    + Received  +  3

    @@ -1,26 +1,15 @@
      Object {
        "answers": Array [
          Object {
    -       "answer": "Prince Charles",
    -       "answerId": undefined,
    -       "colour": undefined,
    +       "answer": "Chicken",
          },
          Object {
    -       "answer": "Prince George",
    -       "answerId": undefined,
    -       "colour": undefined,
    -     },
    -     Object {
    -       "answer": "Princess Charlotte",
    -       "answerId": undefined,
    -       "colour": undefined,
    +       "answer": "Egg",
          },
          Object {
    -       "answer": "Prince William",
    -       "answerId": undefined,
    -       "colour": undefined,
    +       "answer": "Who knows",
          },
        ],
        "duration": 3,
        "points": 5,
        "question": "What came first, the chicken or the egg?",

      176 |     })
      177 |   };
    > 178 |   expect(res).toStrictEqual({
          |               ^
      179 |     questionId: questionId1,
      180 |     question: editedQuestion.question,
      181 |     duration: editedQuestion.duration,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:178:15)

  ● Successful question information for player - different players get the same info

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 8
    + Received  + 0

    @@ -1,26 +1,18 @@
      Object {
        "answers": Array [
          Object {
            "answer": "Prince Charles",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Prince George",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Princess Charlotte",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
          Object {
            "answer": "Prince William",
    -       "answerId": undefined,
    -       "colour": undefined,
          },
        ],
        "duration": 4,
        "points": 5,
        "question": "Who is the Monarch of England?",

      203 |     })
      204 |   };
    > 205 |   expect(res).toStrictEqual({
          |               ^
      206 |     questionId: questionId1,
      207 |     question: question1.question,
      208 |     duration: question1.duration,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:205:15)

FAIL httpTests/player/playerStatus.test.ts (5.185 s)
  ● Successful status - QUESTION_COUNTDOWN

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "atQuestion": 1,
    +   "atQuestion": 0,
        "numQuestions": 1,
        "state": "QUESTION_COUNTDOWN",
      }

      64 |   adminQuizSessionProgress(token, quizId, sessionId, 'NEXT_QUESTION');
      65 |   const res = playerStatus(playerId);
    > 66 |   expect(res).toStrictEqual({
         |               ^
      67 |     state: "QUESTION_COUNTDOWN",
      68 |     numQuestions: 1,
      69 |     atQuestion: 1

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:66:15)

  ● Successful status - FINAL_RESULTS

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "atQuestion": 0,
    +   "atQuestion": 1,
        "numQuestions": 1,
        "state": "FINAL_RESULTS",
      }

      123 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      124 |   const res = playerStatus(playerId);
    > 125 |   expect(res).toStrictEqual({
          |               ^
      126 |     state: "FINAL_RESULTS",
      127 |     numQuestions: 1,
      128 |     atQuestion: 0

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:125:15)

  ● Successful status - END

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "atQuestion": 0,
    +   "atQuestion": 1,
        "numQuestions": 1,
        "state": "END",
      }

      141 |   adminQuizSessionProgress(token, quizId, sessionId, 'END');
      142 |   const res = playerStatus(playerId);
    > 143 |   expect(res).toStrictEqual({
          |               ^
      144 |     state: "END",
      145 |     numQuestions: 1,
      146 |     atQuestion: 0

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:143:15)

FAIL httpTests/adminQuizSession/adminQuizSessionStatus.test.ts
  ● Test successful session status, before quiz in progress

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,10 +1,11 @@
      Object {
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      104 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      105 |   const quizInfo = adminQuizInfo(token, quizId);
    > 106 |   expect(res).toStrictEqual({
          |               ^
      107 |     "state": "LOBBY",
      108 |     "atQuestion": 0,
      109 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:106:15)

  ● Test successful session status, quiz in progress, question 2

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 2

    @@ -1,10 +1,11 @@
      Object {
    -   "atQuestion": 2,
    +   "atQuestion": 1,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      125 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      126 |   const quizInfo = adminQuizInfo(token, quizId);
    > 127 |   expect(res).toStrictEqual({
          |               ^
      128 |     "state": "QUESTION_COUNTDOWN",
      129 |     "atQuestion": 2,
      130 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:127:15)

  ● Test successful session status, single quiz ended

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 2

    @@ -1,10 +1,11 @@
      Object {
    -   "atQuestion": 0,
    +   "atQuestion": 2,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      155 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      156 |   const quizInfo = adminQuizInfo(token, quizId);
    > 157 |   expect(res).toStrictEqual({
          |               ^
      158 |     "state": "END",
      159 |     "atQuestion": 0,
      160 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:157:15)

  ● Test successful session status, single quiz in final results

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 2

    @@ -1,10 +1,11 @@
      Object {
    -   "atQuestion": 0,
    +   "atQuestion": 2,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      183 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      184 |   const quizInfo = adminQuizInfo(token, quizId);
    > 185 |   expect(res).toStrictEqual({
          |               ^
      186 |     "state": "FINAL_RESULTS",
      187 |     "atQuestion": 0,
      188 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:185:15)

  ● Test successful session status with new session created during during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,10 +1,11 @@
      Object {
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      227 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      228 |   const quizInfo = adminQuizInfo(token, quizId);
    > 229 |   expect(res).toStrictEqual({
          |               ^
      230 |     "state": "LOBBY",
      231 |     "atQuestion": 0,
      232 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:229:15)

  ● Test successful session status with question edit during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,10 +1,11 @@
      Object {
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      244 |   expect(res.metadata.timeLastEdited).toBe(editTime);
      245 |   const quizInfo = adminQuizInfo(token, quizId);
    > 246 |   expect(res).toStrictEqual({
          |               ^
      247 |     "state": "LOBBY",
      248 |     "atQuestion": 0,
      249 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:246:15)

  ● Test successful session status with question delete during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,10 +1,11 @@
      Object {
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [

      256 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
      257 |   const quizInfo = adminQuizInfo(token, quizId);
    > 258 |   expect(res).toStrictEqual({
          |               ^
      259 |     "state": "LOBBY",
      260 |     "atQuestion": 0,
      261 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:258:15)

  ● Test successful session status with question add during doesnt affect session

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  -  0
    + Received  + 22

    @@ -1,10 +1,11 @@
      Object {
        "atQuestion": 0,
        "metadata": Object {
          "description": "this is a quiz made by automarking",
          "duration": 0,
    +     "imgUrl": "",
          "name": "test quiz",
          "numQuestions": 2,
          "questions": Array [
            Object {
              "answers": Array [
    @@ -52,10 +53,31 @@
              ],
              "duration": 4,
              "points": 5,
              "question": "Who is the Monarch of COMP1531?",
              "questionId": 1,
    +         "thumbnailUrl": "http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg",
    +       },
    +       Object {
    +         "answers": Array [
    +           Object {
    +             "answer": "Chicken",
    +             "correct": false,
    +           },
    +           Object {
    +             "answer": "Egg",
    +             "correct": false,
    +           },
    +           Object {
    +             "answer": "Who knows",
    +             "correct": true,
    +           },
    +         ],
    +         "duration": 3,
    +         "points": 5,
    +         "question": "What came first, the chicken or the egg?",
    +         "questionId": 2,
              "thumbnailUrl": "http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg",
            },
          ],
          "quizId": 0,
          "timeCreated": 1691825037,

      269 |   adminQuizQuestionAdd(token, quizId, editedQuestion);
      270 |   const res = adminQuizSessionStatus(token, quizId, sessionId);
    > 271 |   expect(res).toStrictEqual({
          |               ^
      272 |     "state": "LOBBY",
      273 |     "atQuestion": 0,
      274 |     "players": [],

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:271:15)

FAIL httpTests/adminQuizSession/adminQuizSessionResults.test.ts
  ● Successful final results for whole session - admin with one player

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"questionResults": [{"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 0}, {"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}, {"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 1}], "usersRankedByScore": [{"name": "Hayden Smith", "score": 10}, {"name": "Yuchao", "score": 0}]}
    Received: 400

       99 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      100 |   const res = adminQuizSessionResults(token, quizId, sessionId);
    > 101 |   expect(res).toStrictEqual({
          |               ^
      102 |     usersRankedByScore: [
      103 |       {
      104 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:101:15)

  ● Successful final results for whole session - admin with 2 players

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"questionResults": [{"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 0}, {"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith", "Yuchao"]}, {"answerId": undefined, "playersCorrect": ["Hayden Smith", "Yuchao"]}], "questionId": 1}], "usersRankedByScore": [{"name": "Hayden Smith", "score": 10}, {"name": "Yuchao", "score": 2.5}]}
    Received: 400

      171 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      172 |   const res = adminQuizSessionResults(token, quizId, sessionId);
    > 173 |   expect(res).toStrictEqual({
          |               ^
      174 |     usersRankedByScore: [
      175 |       {
      176 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:173:15)

FAIL httpTests/adminQuizSession/adminQuizSessionStart.test.ts
  ● Test quizId invalid error, cannot start session

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {"description": "Second quiz description", "duration": 0, "name": "Second quiz", "numQuestions": 1, "questions": [{"answers": [{"answer": "Prince Charles", "correct": true}, {"answer": "Prince George", "correct": false}, {"answer": "Princess Charlotte", "correct": false}, {"answer": "Prince William", "correct": false}], "duration": 4, "points": 5, "question": "Who is the Monarch of England?", "questionId": 0, "thumbnailUrl": "http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg"}], "quizId": 1, "timeCreated": 1691825038, "timeLastEdited": 1691825038}

      80 | iter3test('Test quizId invalid error, cannot start session', () => {
      81 |   const quiz = adminQuizInfo(token, quizId+1);
    > 82 |   expect(quiz).toStrictEqual(400);
         |                ^
      83 | });
      84 |
      85 | iter3test('Test unauthorised quiz to start session', () => {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:82:16)

  ● Test successful session progress to question after autostart time ends

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "QUESTION_COUNTDOWN"
    Received: "LOBBY"

      100 |   playerJoin(sessionId, 'Yuchao');
      101 |   playerJoin(sessionId, 'Giuliana');
    > 102 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual("QUESTION_COUNTDOWN");
          |                                                     ^
      103 | });
      104 |
      105 | /* iter3test('Test invalid token structure, quiz to read', () => {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:102:53)

FAIL httpTests/player/playerResults.test.ts
  ● Successful final results for whole session - player 1

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"questionResults": [{"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 0}, {"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}, {"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 1}], "usersRankedByScore": [{"name": "Hayden Smith", "score": 10}, {"name": "Yuchao", "score": 0}]}
    Received: 404

      107 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      108 |   const res = playerResults(playerId);
    > 109 |   expect(res).toStrictEqual({
          |               ^
      110 |     usersRankedByScore: [
      111 |       {
      112 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:109:15)

  ● Successful final results for whole session - player 2

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"questionResults": [{"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith"]}], "questionId": 0}, {"averageAnswerTime": Any<Number>, "percentCorrect": Any<Number>, "questionCorrectBreakdown": [{"answerId": undefined, "playersCorrect": ["Hayden Smith", "Yuchao"]}, {"answerId": undefined, "playersCorrect": ["Hayden Smith", "Yuchao"]}], "questionId": 1}], "usersRankedByScore": [{"name": "Hayden Smith", "score": 10}, {"name": "Yuchao", "score": 2.5}]}
    Received: 404

      186 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
      187 |   const res = playerResults(playerId2);
    > 188 |   expect(res).toStrictEqual({
          |               ^
      189 |     usersRankedByScore: [
      190 |       {
      191 |         name: "Hayden Smith",

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:188:15)

  ● Unsuccessful final results for whole session - playerId invalid

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 404

      238 | iter3test('Unsuccessful final results for whole session - playerId invalid', () => {
      239 |   const res = playerResults(playerId2+1);
    > 240 |   expect(res).toBe(400);
          |               ^
      241 | });
      242 |
      243 | iter3test('Unsuccessful final results for whole session - session not in FINAL_RESULTS', () => {

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:240:15)

  ● Unsuccessful final results for whole session - session not in FINAL_RESULTS

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 404

      243 | iter3test('Unsuccessful final results for whole session - session not in FINAL_RESULTS', () => {
      244 |   const res = playerResults(playerId);
    > 245 |   expect(res).toBe(400);
          |               ^
      246 | });
      247 |
      248 | // TODO T3 add other states

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:245:15)

FAIL httpTests/adminQuiz/adminQuizThumbnail.test.ts
  ● Test unsuccessful quiz thumnail change - invalid imgUrl, non JPEG 

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      40 |   const badImgUrl = 'http://media.giphy.com/media/EBJQRG6M99zSNhnhsW/giphy.gif';
      41 |   const res = adminQuizThumbnail(token, quizId, badImgUrl);
    > 42 |   expect(res).toStrictEqual(400);
         |               ^
      43 | });
      44 |
      45 | /*

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:42:15)

  ● Test unsuccessful quiz thumnail change - invalid imgUrl, 404 not found

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      55 |   const badImgUrl = 'http://webcms3.cse.unsw.edu.au/static/uploads/coursepic/COMP1531/23T2/031145bd3ec1252213d78dc10cf897e5f779b358722a45f0a98eed7d0d5201b3/blah.png';
      56 |   const res = adminQuizThumbnail(token, quizId, badImgUrl);
    > 57 |   expect(res).toStrictEqual(400);
         |               ^
      58 | });
      59 |
      60 | /*

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:57:15)

  ● Test quizId invalid error, cannot put thumbnail

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      70 | iter3test('Test quizId invalid error, cannot put thumbnail', () => {
      71 |   const quiz = adminQuizThumbnail(token, quizId+1, imgUrl);
    > 72 |   expect(quiz).toStrictEqual(400);
         |                ^
      73 | });
      74 |
      75 | iter3test('Test unauthorised quiz to change thumbnail for', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:72:16)

  ● Test unauthorised quiz to change thumbnail for

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 404

      76 |   const token2 = adminAuthRegister('blah2@email.com', 'password1YAY', 'hayden', 'smith').token;
      77 |   const quiz = adminQuizThumbnail(token2, quizId, imgUrl);
    > 78 |   expect(quiz).toStrictEqual(400);
         |                ^
      79 | });
      80 |
      81 |

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:78:16)

  ● Test invalid token session, for thumbnail change

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 403
    Received: 404

      83 |   adminAuthLogout(token);
      84 |   const quiz = adminQuizThumbnail(token, quizId, imgUrl);
    > 85 |   expect(quiz).toStrictEqual(403);
         |                ^
      86 | });
      87 |
      88 |

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizThumbnail.test.ts:85:16)

FAIL httpTests/adminUser/adminUserPassword.test.ts
  ● Test change password success and can login with new password

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "object"
    Received: "number"

      17 |   adminAuthLogout(token);
      18 |   const userId1 = adminAuthLogin(EMAIL, 'ThisIsAValidNewPassword!123');
    > 19 |   expect(typeof userId1).toStrictEqual('object');
         |                          ^
      20 | });
      21 |
      22 | test('Test old password success is incorrect for change', () => {

      at Object.<anonymous> (httpTests/adminUser/adminUserPassword.test.ts:19:26)

FAIL httpTests/adminAuth/adminAuthLogin.test.ts
  ● Test successful login and register gives different tokens, since they are for different sessions

    expect(received).not.toStrictEqual(expected) // deep equality

    Expected: not {"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uSWQiOiIzNDIzMDc1IiwidXNlcklkIjowLCJpYXQiOjE2OTE4MjUwNDF9.tGFbQ70tjzxe_lLhxudehwTQYBSMNOobghydTrgoo3Y"}

      30 |   const token1 = adminAuthRegister(EMAIL, PASSWORD, FIRST, LAST);
      31 |   const token2 = adminAuthLogin(EMAIL, PASSWORD);
    > 32 |   expect(token1).not.toStrictEqual(token2);
         |                      ^
      33 | });
      34 |

      at Object.<anonymous> (httpTests/adminAuth/adminAuthLogin.test.ts:32:22)

FAIL httpTests/adminQuiz/adminQuizQUestionEdit.test.ts
  ● Test successful question edit

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      354 |   expect(quiz.questions[0].points).toEqual(points);
      355 |   for (let answer of quiz.questions[0].answers) {
    > 356 |     expect(colours).toContain(answer.colour);
          |                     ^
      357 |     expect(answer.answerId).toEqual(expect.any(Number));
      358 |     expect(answerNames).toContain(answer.answer);
      359 |     if (answer.answer === "Queen Elizabeth") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:356:21)

  ● Test successful question edit - multiple correct

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      387 |   const quiz = adminQuizInfo(token, quizId);
      388 |   for (let answer of quiz.questions[0].answers) {
    > 389 |     expect(colours).toContain(answer.colour);
          |                     ^
      390 |     expect(answer.answerId).toEqual(expect.any(Number));
      391 |     expect(answerNames).toContain(answer.answer);
      392 |     if (answer.answer === "King Charles" || answer.answer === "Empress Yuchao") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:389:21)

FAIL httpTests/player/playerQuestionResults.test.ts
  ● Successful particular question results for players - single player single answer correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 4
    + Received  + 1

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -       ],
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 0,
      }

       95 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
       96 |   const res = playerQuestionResults(playerId, 1);
    >  97 |   expect(res).toStrictEqual({
          |               ^
       98 |     questionId: questionId1,
       99 |     questionCorrectBreakdown: [
      100 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:97:15)

  ● Successful particular question results for players - two players single answer correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 5
    + Received  + 1

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -         "Yuchao",
    -       ],
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 0,
      }

      126 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      127 |   const res = playerQuestionResults(playerId2, 1);
    > 128 |   expect(res).toStrictEqual({
          |               ^
      129 |     questionId: questionId1,
      130 |     questionCorrectBreakdown: [
      131 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:128:15)

  ● Successful particular question results for players - single player multiple answers correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 8
    + Received  + 2

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -       ],
    +       "playersCorrect": Array [],
          },
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -       ],
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 1,
      }

      171 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      172 |   const res = playerQuestionResults(playerId, 2);
    > 173 |   expect(res).toStrictEqual({
          |               ^
      174 |     questionId: questionId2,
      175 |     questionCorrectBreakdown: [
      176 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:173:15)

  ● Successful particular question results for players - two players multiple answers correct

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 10
    + Received  +  2

      Object {
        "averageAnswerTime": Any<Number>,
        "percentCorrect": Any<Number>,
        "questionCorrectBreakdown": Array [
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -         "Yuchao",
    -       ],
    +       "playersCorrect": Array [],
          },
          Object {
    -       "answerId": undefined,
    -       "playersCorrect": Array [
    -         "Hayden Smith",
    -         "Yuchao",
    -       ],
    +       "playersCorrect": Array [],
          },
        ],
        "questionId": 1,
      }

      222 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      223 |   const res = playerQuestionResults(playerId2, 2);
    > 224 |   expect(res).toStrictEqual({
          |               ^
      225 |     questionId: questionId2,
      226 |     questionCorrectBreakdown: [
      227 |       {

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:224:15)

FAIL httpTests/adminQuiz/adminQuizQuestionAdd.test.ts
  ● Test successful question add - all details are correctly stored and retrieved by quiz info

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      299 |   expect(quiz.questions[0].points).toEqual(points);
      300 |   for (let answer of quiz.questions[0].answers) {
    > 301 |     expect(colours).toContain(answer.colour);
          |                     ^
      302 |     expect(answer.answerId).toEqual(expect.any(Number));
      303 |     expect(answerNames).toContain(answer.answer);
      304 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:301:21)

  ● Test successful question add - multiple correct

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      332 |   const quiz = adminQuizInfo(token, quizId);
      333 |   for (let answer of quiz.questions[0].answers) {
    > 334 |     expect(colours).toContain(answer.colour);
          |                     ^
      335 |     expect(answer.answerId).toEqual(expect.any(Number));
      336 |     expect(answerNames).toContain(answer.answer);
      337 |     if (answer.answer === "Prince Charles" || answer.answer === "Prince George") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:334:21)

FAIL httpTests/adminQuiz/adminQuizQuestionMove.test.ts
  ● Successful quiz question move

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      79 |   expect(quizInfo.questions[newPosition].points).toEqual(question.points);
      80 |   for (let answer of quizInfo.questions[newPosition].answers) {
    > 81 |     expect(colours).toContain(answer.colour);
         |                     ^
      82 |     expect(answer.answerId).toEqual(expect.any(Number));
      83 |     expect(answerNames).toContain(answer.answer);
      84 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionMove.test.ts:81:21)

  ● Invalid position for quiz move - longer than n-1 questions

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

       97 | test('Invalid position for quiz move - longer than n-1 questions', () => {
       98 |   const res = adminQuizQuestionMove(token, quizId, questionId, 1);
    >  99 |   expect(res).toStrictEqual(400);
          |               ^
      100 | });
      101 |
      102 | test('Invalid position for quiz move - less than 0', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionMove.test.ts:99:15)

FAIL httpTests/adminQuiz/adminQuizQuestionDelete.test.ts
  ● Successful quiz question delete

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 403

      68 | test('Successful quiz question delete', () => {
      69 |   const res = adminQuizQuestionDelete(token, quizId, questionId);
    > 70 |   expect(res).toStrictEqual({});
         |               ^
      71 |   const questions = adminQuizInfo(token, quizId).questions;
      72 |   expect(questions).not.toContain(question)
      73 |

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDelete.test.ts:70:15)

  ● Quiz question already deleted

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 403

      77 |   adminQuizQuestionDelete(token, quizId, questionId);
      78 |   const res = adminQuizQuestionDelete(token, quizId, questionId);
    > 79 |   expect(res).toStrictEqual(400);
         |               ^
      80 | });
      81 |
      82 | test("quizId invalid - quiz question delete", () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDelete.test.ts:79:15)

  ● questionId invalid (already deleted) - quiz question delete

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 403

       99 |   adminQuizQuestionDelete(token, quizId, questionId)
      100 |   const res = adminQuizQuestionDelete(token, quizId, questionId);
    > 101 |   expect(res).toStrictEqual(400);
          |               ^
      102 | });
      103 |
      104 | /* iter3test('token is not a valid structure - quiz question delete', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDelete.test.ts:101:15)

FAIL httpTests/adminQuiz/adminQuizTransfer.test.ts
  ● Test successful quiz transfer

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      18 | test('Test successful quiz transfer', () => {
      19 |   const res = adminQuizTransfer(token, quizId, userEmail);
    > 20 |   expect(res).toStrictEqual({});
         |               ^
      21 |   const quizzes = adminQuizList(token2).quizzes;
      22 |   expect(quizzes).toStrictEqual([{ quizId: quizId, name: 'test quiz' }]);
      23 | });

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTransfer.test.ts:20:15)

  ● Test successful quiz transfer, then transfer back to creator

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      26 |   adminQuizTransfer(token, quizId, userEmail);
      27 |   const res = adminQuizTransfer(token2, quizId, 'blah@email.com');
    > 28 |   expect(res).toStrictEqual({});
         |               ^
      29 |   const quizzes = adminQuizList(token).quizzes;
      30 |   expect(quizzes).toStrictEqual([{ quizId: quizId, name: 'test quiz' }]);
      31 | });

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizTransfer.test.ts:28:15)

FAIL httpTests/player/playerPostChat.test.ts
  ● Successful for one message, same player - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 500

      57 |   // TODO get unix timestamp
      58 |   const timestamp = Math.round(Date.now() / 1000);
    > 59 |   expect(res).toStrictEqual({});
         |               ^
      60 |   const message = playerGetChat(playerId);
      61 |   expect(message.messages[0]).toStrictEqual({
      62 |     messageBody,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:59:15)

  ● Successful for multiple messages, same player, same body - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 500

      72 |   const msg2 = playerPostChat(playerId, messageBody);
      73 |   const timestamp = Math.round(Date.now() / 1000);
    > 74 |   expect(msg1).toStrictEqual({});
         |                ^
      75 |   expect(msg2).toStrictEqual({});
      76 |   const message = playerGetChat(playerId);
      77 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:74:16)

  ● Successful for multiple messages, different players - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 500

       96 |   const msg2 = playerPostChat(playerId2, messageBody);
       97 |   const timestamp = Math.round(Date.now() / 1000);
    >  98 |   expect(msg1).toStrictEqual({});
          |                ^
       99 |   expect(msg2).toStrictEqual({});
      100 |   const message = playerGetChat(playerId);
      101 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:98:16)

  ● messageBody less than 1 character - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      121 | iter3test('messageBody less than 1 character - chat post', () => {
      122 |   const res = playerPostChat(playerId, '');
    > 123 |   expect(res).toBe(400);
          |               ^
      124 | });
      125 |
      126 | iter3test('messageBody more than 100 characters - chat post', () => {

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:123:15)

  ● messageBody more than 100 characters - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      126 | iter3test('messageBody more than 100 characters - chat post', () => {
      127 |   const res = playerPostChat(playerId, 'a'.repeat(101));
    > 128 |   expect(res).toBe(400);
          |               ^
      129 | });
      130 |
      131 | iter3test('Invalid messageBody after a valid one - chat post', () => {

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:128:15)

  ● Invalid messageBody after a valid one - chat post

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      133 |   const timestamp = Math.round(Date.now() / 1000);
      134 |   const res = playerPostChat(playerId, '');
    > 135 |   expect(res).toBe(400);
          |               ^
      136 |   const message = playerGetChat(playerId);
      137 |   expect(message.messages.length).toBe(1);
      138 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:135:15)

FAIL httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts
  ● Successful quiz question duplicate

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      78 |   expect(quiz.questions[1].points).toEqual(question.points);
      79 |   for (let answer of quiz.questions[0].answers) {
    > 80 |     expect(colours).toContain(answer.colour);
         |                     ^
      81 |     expect(answer.answerId).toEqual(expect.any(Number));
      82 |     expect(answerNames).toContain(answer.answer);
      83 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts:80:21)

FAIL httpTests/adminAuth/adminAuthLogout.test.ts
  ● Logout in one session doesnt affect another

    expect(received).not.toStrictEqual(expected) // deep equality

    Expected: not 403

      43 |   adminAuthLogout(token);
      44 |   const res = adminUserDetailsGet(tok2);
    > 45 |   expect(res).not.toStrictEqual(403);
         |                   ^
      46 | });

      at Object.<anonymous> (httpTests/adminAuth/adminAuthLogout.test.ts:45:19)

FAIL httpTests/player/playerGetChat.test.ts
  ● Successful get chat - conversation fetched by player 2

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"messageBody": "I am Tahook-ed on this game", "playerId": 1, "playerName": "Hayden Smith", "timeSent": Any<Number>}
    Received: undefined

      61 |   const timestamp = Math.round(Date.now() / 1000);
      62 |   const message = playerGetChat(playerId2);
    > 63 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      64 |     messageBody,
      65 |     playerId: playerId1,
      66 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:63:31)

  ● Messages from other sessions player isnt in arent returned - chat get for playerId1

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"messageBody": "I am Tahook-ed on this game", "playerId": 1, "playerName": "Hayden Smith", "timeSent": Any<Number>}
    Received: undefined

      83 |   const timestamp = Math.round(Date.now() / 1000);
      84 |   const message = playerGetChat(playerId1);
    > 85 |   expect(message.messages[0]).toStrictEqual({
         |                               ^
      86 |     messageBody,
      87 |     playerId: playerId1,
      88 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:85:31)


Test Suites: 20 failed, 15 passed, 35 total
Tests:       56 failed, 41 skipped, 214 passed, 311 total
Snapshots:   0 total
Time:        46.44 s, estimated 79 s
Ran all test suites matching /httpTests\//i.
npm notice 
npm notice New minor version of npm available! 9.5.1 -> 9.8.1
npm notice Changelog: <https://github.com/npm/cli/releases/tag/v9.8.1>
npm notice Run `npm install -g npm@9.8.1` to update!
npm notice 
